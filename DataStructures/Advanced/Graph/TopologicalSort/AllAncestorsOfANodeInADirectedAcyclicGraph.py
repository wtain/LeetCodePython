"""
https://leetcode.com/problems/all-ancestors-of-a-node-in-a-directed-acyclic-graph/

You are given a positive integer n representing the number of nodes of a Directed Acyclic Graph (DAG). The nodes are numbered from 0 to n - 1 (inclusive).

You are also given a 2D integer array edges, where edges[i] = [fromi, toi] denotes that there is a unidirectional edge from fromi to toi in the graph.

Return a list answer, where answer[i] is the list of ancestors of the ith node, sorted in ascending order.

A node u is an ancestor of another node v if u can reach v via a set of edges.



Example 1:


Input: n = 8, edgeList = [[0,3],[0,4],[1,3],[2,4],[2,7],[3,5],[3,6],[3,7],[4,6]]
Output: [[],[],[],[0,1],[0,2],[0,1,3],[0,1,2,3,4],[0,1,2,3]]
Explanation:
The above diagram represents the input graph.
- Nodes 0, 1, and 2 do not have any ancestors.
- Node 3 has two ancestors 0 and 1.
- Node 4 has two ancestors 0 and 2.
- Node 5 has three ancestors 0, 1, and 3.
- Node 6 has five ancestors 0, 1, 2, 3, and 4.
- Node 7 has four ancestors 0, 1, 2, and 3.
Example 2:


Input: n = 5, edgeList = [[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]
Output: [[],[0],[0,1],[0,1,2],[0,1,2,3]]
Explanation:
The above diagram represents the input graph.
- Node 0 does not have any ancestor.
- Node 1 has one ancestor 0.
- Node 2 has two ancestors 0 and 1.
- Node 3 has three ancestors 0, 1, and 2.
- Node 4 has four ancestors 0, 1, 2, and 3.


Constraints:

1 <= n <= 1000
0 <= edges.length <= min(2000, n * (n - 1) / 2)
edges[i].length == 2
0 <= fromi, toi <= n - 1
fromi != toi
There are no duplicate edges.
The graph is directed and acyclic.
"""
from collections import defaultdict
from typing import List

from Common.ObjectTestingUtils import run_functional_tests


# WRONG
# class Solution:
#     def getAncestors(self, n: int, edges: List[List[int]]) -> List[List[int]]:
#         ascendants = [[] for _ in range(n)]
#         descendants = [[] for _ in range(n)]
#         for a, b in edges:
#             ascendants[b].append(a)
#             descendants[a].append(b)
#
#         level = {i: set() for i in range(n) if not ascendants[i]}
#         result = [set() for _ in range(n)]
#         while level:
#             next_level = defaultdict(list)
#             for node in level:
#                 result[node] += level[node]
#                 for child in descendants[node]:
#                     next_level[child] = paren.append(node)
#             level = next_level
#
#         return result


# TLE
# class Solution:
#     def getAncestors(self, n: int, edges: List[List[int]]) -> List[List[int]]:
#         adj = [[False for _ in range(n)] for _ in range(n)]
#         for a, b in edges:
#             adj[a][b] = True
#
#         for k in range(n):
#             for i in range(n):
#                 for j in range(n):
#                     adj[i][j] = adj[i][j] or (adj[i][k] and adj[k][j])
#
#         return [[j for j in range(n) if adj[j][i]] for i in range(n)]


# WRONG
# class Solution:
#     def getAncestors(self, n: int, edges: List[List[int]]) -> List[List[int]]:
#         ascendants = [[] for _ in range(n)]
#         descendants = [[] for _ in range(n)]
#         for a, b in edges:
#             ascendants[b].append(a)
#             descendants[a].append(b)
#
#         level = {i: [] for i in range(n) if not ascendants[i]}
#         result = [[] for _ in range(n)]
#         while level:
#             next_level = defaultdict(list)
#             for node in level:
#                 result[node] = level[node]
#                 for child in descendants[node]:
#                     for parent in level[node]:
#                         next_level[child].append(parent)
#                     next_level[child].append(node)
#             level = next_level
#
#         return result


# Runtime
# 1081 ms
# Beats
# 49.6%
# Memory
# 32.5 MB
# Beats
# 65.73%
# https://leetcode.com/problems/all-ancestors-of-a-node-in-a-directed-acyclic-graph/solutions/1821935/python3-java-c-simple-dfs-o-n-2/
class Solution:
    def getAncestors(self, n: int, edges: List[List[int]]) -> List[List[int]]:
        children = defaultdict(list)
        result = [[] for _ in range(n)]
        for a, b in edges:
            children[a].append(b)

        def dfs(node, curr):
            nonlocal result
            for child in children[curr]:
                if result[child] and result[child][-1] == node:
                    continue
                result[child].append(node)
                dfs(node, child)

        for i in range(n):
            dfs(i, i)
        return result


tests = [

    [8, [[0,3],[0,4],[1,3],[2,4],[2,7],[3,5],[3,6],[3,7],[4,6]], [[],[],[],[0,1],[0,2],[0,1,3],[0,1,2,3,4],[0,1,2,3]]],
    [5, [[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]], [[],[0],[0,1],[0,1,2],[0,1,2,3]]],
]

run_functional_tests(Solution().getAncestors, tests)
