"""
https://leetcode.com/explore/featured/card/april-leetcoding-challenge-2021/594/week-2-april-8th-april-14th/3703/
https://leetcode.com/problems/longest-increasing-path-in-a-matrix/

Given an m x n integers matrix, return the length of the longest increasing path in matrix.

From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).



Example 1:


Input: matrix = [[9,9,4],[6,6,8],[2,1,1]]
Output: 4
Explanation: The longest increasing path is [1, 2, 6, 9].
Example 2:


Input: matrix = [[3,4,5],[3,2,6],[2,2,1]]
Output: 4
Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.
Example 3:

Input: matrix = [[1]]
Output: 1


Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 200
0 <= matrix[i][j] <= 231 - 1
"""
from functools import lru_cache
from itertools import product
from typing import List

from Common.Helpers.MatrixUtils import matrix_size
from Common.ObjectTestingUtils import run_functional_tests


# TLE?? Not submitted
# class Solution:
#     def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
#         n = len(matrix)
#         m = len(matrix[0])
#         l = [[1] * m for _ in range(n)]
#
#         def dfs(i: int, j: int) -> int:
#             nonlocal n, m, matrix, l
#             visited = [[False] * m for _ in range(n)]
#             toVisit = []
#             toVisit.append([i, j, 1])
#
#             max_len = 1
#
#             def step(i1: int, j1: int, i2: int, j2: int):
#                 nonlocal toVisit, visited, matrix, n, m
#                 if 0 <= i2 < n and 0 <= j2 < m and not visited[i2][j2] and matrix[i2][j2] < matrix[i1][j1]:
#                     toVisit.append([i2, j2, l1+1])
#
#             while toVisit:
#                 [i1, j1, l1] = toVisit.pop()
#                 l[i1][j1] = l1
#                 visited[i1][j1] = True
#                 step(i1, j1, i1 - 1, j1)
#                 step(i1, j1, i1 + 1, j1)
#                 step(i1, j1, i1, j1 - 1)
#                 step(i1, j1, i1, j1 + 1)
#                 max_len = max(max_len, l1)
#
#             return max_len
#
#         max_len = 1
#
#         for i in range(n):
#             for j in range(m):
#                 len1 = dfs(i, j)
#                 max_len = max(max_len, len1)
#
#         return max_len


# Runtime: 3224 ms, faster than 5.01% of Python3 online submissions for Longest Increasing Path in a Matrix.
# Memory Usage: 42 MB, less than 5.07% of Python3 online submissions for Longest Increasing Path in a Matrix.
# class Solution:
#     def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
#         n = len(matrix)
#         m = len(matrix[0])
#         l = [[1] * m for _ in range(n)]
#
#         visited = [[False] * m for _ in range(n)]
#
#         def dfs(i: int, j: int) -> int:
#             nonlocal n, m, matrix, l, visited
#
#             def step(i1: int, j1: int, i2: int, j2: int, path: List[List[int]]):
#                 nonlocal toVisit, matrix, n, m
#                 if 0 <= i2 < n and 0 <= j2 < m and \
#                    matrix[i2][j2] > matrix[i1][j1]:
#                     heapq.heappush(toVisit, [-(len(path)+1), matrix[i2][j2], path + [[i2, j2]]])
#
#             toVisit = []
#             heapq.heappush(toVisit, [-1, matrix[i][j], [[i, j]]])
#
#             max_len2 = 1
#             visited2 = [[False] * m for _ in range(n)]
#
#             while toVisit:
#                 [_, _, path] = heapq.heappop(toVisit)
#                 [i1, j1] = path[-1]
#                 l1 = len(path)
#                 if not visited2[i1][j1]:
#                     visited2[i1][j1] = True
#                     for [di, dj] in [[-1, 0], [1, 0], [0, -1], [0, 1]]:
#                         step(i1, j1, i1 + di, j1 + dj, path)
#                     for k, [ii, jj] in enumerate(path):
#                         l[ii][jj] = max(l[ii][jj], l1 - k)
#                         visited[ii][jj] = True
#                 else:
#                     l[i][j] = max(l[i][j], l1 + l[i1][j1] - 1)
#                 max_len2 = max(max_len2, l[i][j])
#
#             return max_len2
#
#         max_len = 1
#
#         toVisit = []
#         for i in range(n):
#             for j in range(m):
#                 toVisit.append([matrix[i][j], i, j])
#
#         toVisit.sort()
#
#         for [_, i, j] in toVisit:
#             if visited[i][j]:
#                 continue
#             len1 = dfs(i, j)
#             visited[i][j] = True
#             l[i][j] = len1
#             max_len = max(max_len, len1)
#
#         return max_len


# class Solution:
#     def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
#         n = len(matrix)
#         m = len(matrix[0])
#         l = [[1] * m for _ in range(n)]
#
#         visited = [[False] * m for _ in range(n)]
#
#         def dfs(i: int, j: int) -> int:
#             nonlocal n, m, matrix, l, visited
#
#             def step(i1: int, j1: int, i2: int, j2: int, path: List[List[int]]):
#                 nonlocal toVisit, matrix, n, m
#                 if 0 <= i2 < n and 0 <= j2 < m and \
#                    matrix[i2][j2] > matrix[i1][j1]:
#                     heapq.heappush(toVisit, [-(len(path)+1), matrix[i2][j2], path + [[i2, j2]]])
#
#             toVisit = []
#             heapq.heappush(toVisit, [-1, matrix[i][j], [[i, j]]])
#
#             max_len2 = 1
#             visited2 = [[False] * m for _ in range(n)]
#
#             while toVisit:
#                 [_, _, path] = heapq.heappop(toVisit)
#                 [i1, j1] = path[-1]
#                 l1 = len(path)
#                 if not visited2[i1][j1]:
#                     visited2[i1][j1] = True
#                     for [di, dj] in [[-1, 0], [1, 0], [0, -1], [0, 1]]:
#                         step(i1, j1, i1 + di, j1 + dj, path)
#                     for k, [ii, jj] in enumerate(path):
#                         l[ii][jj] = max(l[ii][jj], l1 - k)
#                         visited[ii][jj] = True
#                 else:
#                     l[i][j] = max(l[i][j], l1 + l[i1][j1] - 1)
#                 max_len2 = max(max_len2, l[i][j])
#
#             return max_len2
#
#         max_len = 1
#
#         toVisit = []
#         for i in range(n):
#             for j in range(m):
#                 toVisit.append([matrix[i][j], i, j])
#
#         toVisit.sort()
#
#         for [_, i, j] in toVisit:
#             if visited[i][j]:
#                 continue
#             len1 = dfs(i, j)
#             visited[i][j] = True
#             l[i][j] = len1
#             max_len = max(max_len, len1)
#
#         return max_len


# Runtime: 451 ms, faster than 88.26% of Python3 online submissions for Longest Increasing Path in a Matrix.
# Memory Usage: 19.6 MB, less than 15.98% of Python3 online submissions for Longest Increasing Path in a Matrix.
# Runtime: 540 ms, faster than 36.23% of Python3 online submissions for Longest Increasing Path in a Matrix.
# Memory Usage: 18.7 MB, less than 19.63% of Python3 online submissions for Longest Increasing Path in a Matrix.
class Solution:
    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        n, m = len(matrix), len(matrix[0])
        neighbours = [[-1, 0], [1, 0], [0, -1], [0, 1]]

        @lru_cache(None)
        def dfs(i: int, j: int):
            result = 1
            for di, dj in neighbours:
                if 0 <= i + di < n and 0 <= j + dj < m and matrix[i+di][j+dj] < matrix[i][j]:
                    result = max(result, dfs(i+di, j+dj)+1)
            return result

        return max(dfs(i, j) for i, j in product(range(n), range(m)))




tests = [
    ([[6,8,15,17,3,2,16,16],[12,6,12,17,17,5,11,10],[2,18,1,19,0,7,3,1],[15,18,17,0,11,7,19,8],[18,9,13,0,12,2,14,5],[13,3,0,11,13,11,5,3],[10,3,9,0,7,16,4,13],[9,18,9,19,5,15,4,5],[10,16,5,9,17,14,2,17],[4,8,15,15,10,8,2,18],[16,1,13,3,16,5,13,4],[6,5,4,19,19,14,7,19],[3,1,7,13,0,12,0,18],[9,12,1,16,5,15,7,19],[0,15,1,13,9,1,9,19],[10,8,5,13,13,18,6,1]], 6),

    ([[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],[75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38],[76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113],[151,150,149,148,147,146,145,144,143,142,141,140,139,138,137,136,135,134,133,132,131,130,129,128,127,126,125,124,123,122,121,120,119,118,117,116,115,114],[152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189],[227,226,225,224,223,222,221,220,219,218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198,197,196,195,194,193,192,191,190],[228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265],[303,302,301,300,299,298,297,296,295,294,293,292,291,290,289,288,287,286,285,284,283,282,281,280,279,278,277,276,275,274,273,272,271,270,269,268,267,266],[304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341],[379,378,377,376,375,374,373,372,371,370,369,368,367,366,365,364,363,362,361,360,359,358,357,356,355,354,353,352,351,350,349,348,347,346,345,344,343,342],[380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417],[455,454,453,452,451,450,449,448,447,446,445,444,443,442,441,440,439,438,437,436,435,434,433,432,431,430,429,428,427,426,425,424,423,422,421,420,419,418],[456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493],[531,530,529,528,527,526,525,524,523,522,521,520,519,518,517,516,515,514,513,512,511,510,509,508,507,506,505,504,503,502,501,500,499,498,497,496,495,494],[532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569],[607,606,605,604,603,602,601,600,599,598,597,596,595,594,593,592,591,590,589,588,587,586,585,584,583,582,581,580,579,578,577,576,575,574,573,572,571,570],[608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645],[683,682,681,680,679,678,677,676,675,674,673,672,671,670,669,668,667,666,665,664,663,662,661,660,659,658,657,656,655,654,653,652,651,650,649,648,647,646],[684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721],[759,758,757,756,755,754,753,752,751,750,749,748,747,746,745,744,743,742,741,740,739,738,737,736,735,734,733,732,731,730,729,728,727,726,725,724,723,722],[760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797],[835,834,833,832,831,830,829,828,827,826,825,824,823,822,821,820,819,818,817,816,815,814,813,812,811,810,809,808,807,806,805,804,803,802,801,800,799,798],[836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873],[911,910,909,908,907,906,905,904,903,902,901,900,899,898,897,896,895,894,893,892,891,890,889,888,887,886,885,884,883,882,881,880,879,878,877,876,875,874],[912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949],[987,986,985,984,983,982,981,980,979,978,977,976,975,974,973,972,971,970,969,968,967,966,965,964,963,962,961,960,959,958,957,956,955,954,953,952,951,950],[988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025],[1063,1062,1061,1060,1059,1058,1057,1056,1055,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,1044,1043,1042,1041,1040,1039,1038,1037,1036,1035,1034,1033,1032,1031,1030,1029,1028,1027,1026]], 1064),

    ([[2,0,6,7],[2,1,2,15],[5,11,14,19],[9,10,8,15]], 9),

    ([[2,2,0,6,7,8],[9,2,1,2,15,0],[6,5,11,14,19,6],[3,9,10,8,15,14]], 9),

    ([[11,2,11,0,15,12,4,15,0,14,11,3,19,11,5,11,18,19,4,3,11,1,9,17,5,2,15,18,11,15],[12,10,8,15,4,7,4,5,7,8,5,12,3,3,10,12,16,15,17,13,13,16,0,0,17,17,11,3,14,0],[8,18,1,6,15,16,14,11,9,11,3,4,17,7,2,16,18,2,0,0,16,18,10,15,14,18,10,19,17,6],[14,17,4,13,13,6,16,1,3,18,18,18,4,1,15,4,0,9,19,3,6,7,19,13,11,11,10,19,3,15],[16,6,19,17,19,17,5,12,6,3,1,0,3,10,13,18,4,3,9,0,1,18,9,15,18,3,4,6,1,15],[1,2,12,9,9,7,17,0,1,14,18,1,5,3,0,7,2,19,7,19,1,11,1,3,2,4,0,3,16,18],[18,10,10,3,12,11,7,8,3,16,7,11,11,12,15,1,13,9,8,17,1,9,7,19,1,14,8,10,18,14],[5,19,9,4,10,14,1,5,11,16,11,3,5,4,19,8,11,16,19,12,6,3,18,16,17,8,11,19,7,14],[0,15,17,11,10,13,19,0,10,3,15,19,3,3,3,4,3,12,17,10,5,16,12,5,5,17,5,17,6,6],[8,19,9,3,13,8,13,17,4,12,13,8,13,12,10,10,16,7,2,8,17,3,7,1,7,16,11,19,13,19],[6,19,6,13,10,5,14,7,3,1,10,6,4,8,15,0,0,2,12,13,14,14,7,5,1,16,15,15,4,7],[7,7,11,14,2,4,14,2,2,0,6,11,15,14,11,13,2,3,14,9,16,3,8,15,2,18,15,15,2,2],[7,5,12,10,14,3,6,9,2,1,2,15,0,4,7,9,7,12,15,9,2,13,7,8,7,9,4,3,5,19],[11,9,1,8,0,15,1,6,5,11,14,19,6,11,0,12,1,6,8,7,0,1,2,9,14,4,5,8,3,16],[8,0,11,5,14,4,19,0,6,8,1,10,13,8,18,6,6,4,5,9,10,14,14,13,12,16,4,3,3,11],[0,9,6,19,16,4,5,10,13,19,8,15,14,7,13,11,17,18,14,18,19,11,0,4,12,11,2,8,17,14],[16,19,16,9,9,14,5,13,7,10,18,6,15,12,12,1,11,16,1,8,1,7,16,7,19,6,12,0,15,0],[2,4,18,15,13,9,4,18,19,5,16,7,10,1,7,7,4,4,10,8,13,15,9,4,16,13,6,3,13,7],[3,11,10,13,6,4,0,13,11,4,5,6,19,13,8,10,8,9,2,4,4,11,12,8,12,15,6,1,10,12],[7,6,19,3,2,14,15,6,9,1,6,14,4,15,13,9,14,7,10,12,17,18,6,4,12,4,1,6,6,12],[15,17,9,15,9,15,9,10,10,11,12,17,2,18,11,0,6,11,14,17,2,13,9,13,3,4,3,1,8,11],[17,13,12,17,4,19,19,7,7,13,19,10,4,16,1,18,14,2,9,18,2,8,3,1,10,9,12,6,2,11],[17,12,6,8,3,16,5,2,16,3,13,3,13,9,11,11,5,12,14,16,3,19,16,16,1,14,5,3,17,19],[1,4,0,3,1,17,5,15,2,19,12,7,18,13,1,0,7,2,9,18,10,18,8,9,13,13,8,10,14,14],[9,14,4,18,10,18,3,9,9,17,16,4,19,7,3,18,7,0,10,13,9,10,11,16,3,5,1,2,16,19],[8,10,13,8,7,2,9,4,16,15,5,4,15,7,9,7,15,2,6,17,14,3,13,3,4,15,13,10,8,16],[17,7,19,19,13,12,6,0,11,4,10,4,1,9,15,9,7,7,14,6,7,18,9,13,6,16,5,2,17,1],[2,7,0,4,8,18,4,11,13,4,11,12,3,18,11,2,4,18,3,3,17,9,18,11,9,15,14,19,7,17],[13,1,15,18,4,12,18,18,15,16,7,17,9,15,11,3,9,7,18,13,3,11,7,19,10,10,7,13,7,19],[17,17,14,3,19,7,1,13,9,3,6,16,10,8,14,8,17,18,12,11,4,11,10,15,9,0,4,12,7,15],[4,4,8,1,7,11,13,4,11,5,18,2,16,11,16,13,0,13,13,12,11,15,8,4,0,3,2,9,8,15],[17,4,13,5,3,17,14,4,7,6,6,11,16,18,2,0,3,12,1,5,12,16,3,14,4,16,5,8,15,9],[5,3,17,17,6,4,19,5,4,6,11,4,14,18,4,19,16,15,1,17,3,8,13,14,16,13,18,19,6,4],[15,0,8,15,6,6,11,8,18,2,4,10,18,16,15,8,1,5,9,13,7,19,12,2,9,18,1,15,12,8],[5,0,18,14,1,8,18,15,5,13,15,7,8,8,9,0,14,12,4,17,2,10,9,7,19,7,19,9,7,1],[7,4,16,16,13,4,3,6,15,11,14,7,3,0,5,15,10,13,18,18,11,6,7,9,19,13,4,2,7,9],[9,14,15,11,14,5,15,1,19,15,3,4,0,10,4,1,2,15,18,15,15,2,9,0,3,10,9,16,4,1],[14,13,17,19,0,13,15,9,16,18,5,6,16,16,6,10,14,15,17,5,9,2,5,11,19,19,11,6,15,14],[17,7,19,6,5,19,10,2,11,17,17,13,16,13,19,4,12,3,4,13,7,9,19,9,12,3,16,8,18,13]], 9),

    ([[7,6,1,1],[2,7,6,0],[1,3,5,1],[6,6,3,2]], 7),

    ([[0,1,2,3,4,5,6,7,8,9],[19,18,17,16,15,14,13,12,11,10],[20,21,22,23,24,25,26,27,28,29],[39,38,37,36,35,34,33,32,31,30],[40,41,42,43,44,45,46,47,48,49],[59,58,57,56,55,54,53,52,51,50],[60,61,62,63,64,65,66,67,68,69],[79,78,77,76,75,74,73,72,71,70],[80,81,82,83,84,85,86,87,88,89],[99,98,97,96,95,94,93,92,91,90],[100,101,102,103,104,105,106,107,108,109],[119,118,117,116,115,114,113,112,111,110],[120,121,122,123,124,125,126,127,128,129],[139,138,137,136,135,134,133,132,131,130],[0,0,0,0,0,0,0,0,0,0]], 140),

    ([[3,4,5],[3,2,6],[2,2,1]], 4),

    ([[9,9,4],[6,6,8],[2,1,1]], 4),
    ([[1]], 1)
]

run_functional_tests(Solution().longestIncreasingPath, tests, input_metric=lambda test: matrix_size(test[0]))